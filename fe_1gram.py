import pandas as pd
import numpy as np
import os
import pickle
import gensim
from gensim import corpora
from pprint import pprint

class ReadTxtFiles(object):
    def __init__(self, dirname):
        self.dirname = dirname
        self.counter = 0

    def tokenize(self, line):
        tokens = line.split()[1:]
        return tokens

    def __iter__(self):
        for fname in os.listdir(self.dirname)[:20]:
            self.counter += 1
            if not self.counter % 5:
                print(self.counter)
            for line in open(os.path.join(self.dirname, fname), 'r'):
                yield self.tokenize(line)

def read_bytes2tokenized_str(filename):
    with open(filename, 'r') as reader:
        data = reader.read()
        data = data.split()
    return data

def get_bow_features(dictionary, train_or_test, filename):
    data = read_bytes2tokenized_str(train_or_test + '/'+ filename + '.bytes')
    bow = dictionary.doc2bow(data)
    dict_bow = dict(bow)
    return dict_bow

def train_one_gram_dict_and_save(path_to_text_directory, save_name):                
    dictionary = corpora.Dictionary(ReadTxtFiles(path_to_text_directory))    

    with open(save_name, 'wb') as f:
        pickle.dump(dictionary, f)
    
    return dictionary

def get_one_gram_features_and_save(dictionary, md5_file, train_or_test, save_file_name):
    # get md5 list of train
    train = pd.read_csv(md5_file)
    train_md5 = train.loc[:,'md5']

    # get bow for each md5
    bow_matrix = []
    counter = 0
    for row in train_md5:
        counter += 1
        bow = get_bow_features(dictionary, train_or_test, row)
        bow_matrix.append(bow)
        print(counter)
    
    df_bow = pd.DataFrame.from_records(bow_matrix)
    df_bow.columns = ['b_'+dictionary[col] for col in df_bow]
    df_bow['md5'] = train_md5
    df_bow.to_csv(save_file_name, index=False)

if __name__ == "__main__":

    dictionary = train_one_gram_dict_and_save("train", "train_dict.pickle")

    get_one_gram_features_and_save(dictionary, 'trainLabels.csv', 'train', 'train_one_gram.csv')
    
    get_one_gram_features_and_save(dictionary, 'ResultSample.csv', 'test', 'test_one_gram.csv')